name: Bump Minor Version on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop
  workflow_dispatch: # Allow manual trigger

jobs:
  bump-minor-version:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    # Grant permissions to write to the repository
    permissions:
      contents: write
      pull-requests: read

    # Use concurrency to prevent duplicate runs
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: latest

      - name: Install dependencies
        run: uv sync --group dev

      - name: Check if version bump is needed
        id: check-bump
        run: |
          # Check if this PR already has a version bump commit
          PR_NUMBER=${{ github.event.pull_request.number }}
          if git log --oneline --grep="Bump minor version" | grep -q "PR #$PR_NUMBER"; then
            echo "Version bump already exists for PR #$PR_NUMBER"
            echo "skip_bump=true" >> $GITHUB_OUTPUT
          else
            echo "No version bump found for PR #$PR_NUMBER"
            echo "skip_bump=false" >> $GITHUB_OUTPUT
          fi

          # Also check if we're on a branch that already has recent version bumps
          # This prevents multiple bumps on the same branch
          RECENT_BUMPS=$(git log --oneline --since="1 hour ago" --grep="Bump minor version" | wc -l)
          if [ "$RECENT_BUMPS" -gt 0 ]; then
            echo "Recent version bumps detected, skipping to prevent duplicates"
            echo "skip_bump=true" >> $GITHUB_OUTPUT
          fi

      - name: Bump minor version
        if: steps.check-bump.outputs.skip_bump != 'true'
        run: |
          uv run bump-my-version bump minor -v --allow-dirty

      - name: Commit version bump
        if: steps.check-bump.outputs.skip_bump != 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add all version-related files
          git add .

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit with descriptive message
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_TITLE="${{ github.event.pull_request.title }}"
            git commit -m "Bump minor version after PR #$PR_NUMBER merge

            - Triggered by: $PR_TITLE"
          fi

      - name: Create or update version bump PR
        if: steps.check-bump.outputs.skip_bump != 'true'
        run: |
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          VERSION_BUMP_BRANCH="version-bump/$(date +%s)"

          # Create a new branch for the version bump
          git checkout -b "$VERSION_BUMP_BRANCH"
          git push origin "$VERSION_BUMP_BRANCH"

          # Check for existing version bump PRs and close them
          EXISTING_PR=$(gh pr list --head "version-bump/*" --base "$TARGET_BRANCH" --json number,title --jq '.[0].number // empty')
          if [ ! -z "$EXISTING_PR" ]; then
            echo "Closing existing version bump PR #$EXISTING_PR"
            gh pr close "$EXISTING_PR" --delete-branch
          fi

          # Create new PR with auto-merge enabled
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"

          gh pr create \
            --base "$TARGET_BRANCH" \
            --head "$VERSION_BUMP_BRANCH" \
            --title "ðŸ¤– Auto: Bump minor version after PR #$PR_NUMBER merge" \
            --body "This PR automatically bumps the minor version after merging PR #$PR_NUMBER.

          **Triggered by:** $PR_TITLE

          **Changes:**
          - Bumped minor version
          - Updated version files

          This PR will be automatically merged once approved."

          # Enable auto-merge
          gh pr merge --auto --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git tag and GitHub release
        if: steps.check-bump.outputs.skip_bump != 'true'
        run: |
          # Read the new version from VERSION file
          NEW_VERSION=$(cat VERSION)
          echo "Creating tag and release for version: $NEW_VERSION"

          # Create and push the Git tag
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

          # Create GitHub release as pre-release
          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --notes "Pre-release for version $NEW_VERSION

          This is an automated pre-release created after merging PR #${{ github.event.pull_request.number }}.

          Changes:
          - ${{ github.event.pull_request.title }}" \
            --prerelease \
            --target "${{ github.event.pull_request.base.ref }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
